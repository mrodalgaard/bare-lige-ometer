{"version":3,"sources":["util/firebase.ts","util/analytics.ts","util/theme.ts","util/constants.ts","components/CornerBanner.tsx","util/types.ts","components/Input.tsx","util/helpers.ts","components/Meter.tsx","components/ShareButton.tsx","components/Title.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","LogEvent","Colors","analytics","logEvent","event","parameters","isSupported","then","title","process","meterColors","Success","Warning","Error","githubLink","QueryParameter","StyledLink","styled","a","CornerBanner","href","aria-label","onClick","GithubLink","xmlns","width","height","viewBox","fill","Background","d","Header","StyledInput","input","StyledLabel","label","Input","useState","setTitle","useQueryParam","StringParam","paramTitle","setParamTitle","inputRef","useRef","debouncedChange","useCallback","debounce","TextChange","undefined","useEffect","current","focus","cancel","htmlFor","id","ref","type","value","onChange","target","capValue","Math","min","max","Container","div","Meter","gaugeValue","setGaugeValue","NumberParam","paramValue","setParamValue","canvasRef","gaugeRef","set","options","angle","lineWidth","radiusScale","pointer","length","strokeWidth","color","limitMax","limitMin","highDpiSupport","staticZones","map","index","strokeStyle","floor","ceil","Gauge","setOptions","maxValue","setMinValue","percent","round","ValueChange","updateGauge","clientX","window","innerWidth","CopiedLabel","p","ShareButton","copied","setCopied","setTimeout","ShareClick","shareData","url","location","navigator","share","webShare","clipboard","writeText","addToClipboard","h1","Title","App","ReactRouterRoute","Route","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.acbc3149.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCh4kyWy3-higbBhQBndDjhGLChN9iwWvI\",\n  authDomain: \"bare-lige-ometer-6568b.firebaseapp.com\",\n  databaseURL: \"https://bare-lige-ometer-6568b.firebaseio.com\",\n  projectId: \"bare-lige-ometer-6568b\",\n  storageBucket: \"bare-lige-ometer-6568b.appspot.com\",\n  messagingSenderId: \"630676087916\",\n  appId: \"1:630676087916:web:6155aef8e58e215c036449\",\n  measurementId: \"G-PNV2NF5MND\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import \"firebase/analytics\";\nimport firebase from \"./firebase\";\n\nexport enum LogEvent {\n  ShareClick = \"share_click\",\n  ValueChange = \"value_change\",\n  TextChange = \"text_change\",\n\n  GithubLink = \"github_link\",\n}\n\nclass Analytics {\n  private analytics: firebase.analytics.Analytics | undefined;\n\n  constructor() {\n    firebase.analytics.isSupported().then((isSupported) => {\n      if (isSupported) {\n        this.analytics = firebase.analytics();\n      }\n    });\n  }\n\n  public logEvent = (event: LogEvent, parameters?: any) => {\n    this.analytics?.logEvent(event, parameters);\n  };\n}\n\nexport default new Analytics();\n","export enum Colors {\n  Background = \"#ecf0f1\",\n  Header = \"#464a4e\",\n\n  Success = \"#00b894\",\n  Warning = \"#fdcb6e\",\n  Error = \"#d63031\",\n}\n","import { Colors } from \"./theme\";\n\nexport const title = process.env.REACT_APP_WEBSITE_NAME ?? \"\";\n\nexport const meterColors = [Colors.Success, Colors.Warning, Colors.Error];\n\nexport const githubLink = process.env.REACT_APP_GIT ?? \"\";\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport analytics, { LogEvent } from \"../util/analytics\";\nimport { githubLink } from \"../util/constants\";\nimport { Colors } from \"../util/theme\";\n\nconst StyledLink = styled.a`\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  &:hover svg {\n    fill: ${Colors.Success};\n  }\n`;\n\nconst CornerBanner = () => {\n  const onClick = () => {\n    analytics.logEvent(LogEvent.GithubLink);\n  };\n\n  return (\n    <StyledLink href={githubLink} aria-label=\"Github\" onClick={onClick}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"80\"\n        height=\"80\"\n        viewBox=\"0 0 250 250\"\n        fill={Colors.Background}\n      >\n        <path d=\"M0 0l115 115h15l12 27 108 108V0z\" fill={Colors.Header} />\n        <path d=\"M128 109c-15-9-9-19-9-19 3-7 2-11 2-11-1-7 3-2 3-2 4 5 2 11 2 11-3 10 5 15 9 16\" />\n        <path d=\"M115 115s4 2 5 0l14-14c3-2 6-3 8-3-8-11-15-24 2-41 5-5 10-7 16-7 1-2 3-7 12-11 0 0 5 3 7 16 4 2 8 5 12 9s7 8 9 12c14 3 17 7 17 7-4 8-9 11-11 11 0 6-2 11-7 16-16 16-30 10-41 2 0 3-1 7-5 11l-12 11c-1 1 1 5 1 5z\" />\n      </svg>\n    </StyledLink>\n  );\n};\n\nexport default CornerBanner;\n","export interface ShareData {\n  title: string;\n  text?: string;\n  url: string;\n}\n\nexport interface MeterColorPercent {\n  strokeStyle: string;\n  min: number;\n  max: number;\n}\n\nexport enum QueryParameter {\n  title = \"title\",\n  value = \"value\",\n}\n","import debounce from \"lodash.debounce\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { StringParam, useQueryParam } from \"use-query-params\";\nimport analytics, { LogEvent } from \"../util/analytics\";\nimport { Colors } from \"../util/theme\";\nimport { QueryParameter } from \"../util/types\";\n\nconst StyledInput = styled.input`\n  display: block;\n  margin: 0 auto;\n  width: 100%;\n\n  background: transparent;\n  border: 0;\n  outline: 0;\n  font-size: 30px;\n  color: ${Colors.Header};\n  text-align: center;\n`;\n\nconst StyledLabel = styled.label`\n  display: none;\n`;\n\nconst Input = () => {\n  const [title, setTitle] = useState(\"\");\n  const [paramTitle, setParamTitle] = useQueryParam(\n    QueryParameter.title,\n    StringParam\n  );\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Set query parameter title and log event on debounced title change\n  const debouncedChange = useCallback(\n    debounce((title: string) => {\n      analytics.logEvent(LogEvent.TextChange);\n      setParamTitle(title || undefined);\n    }, 500),\n    []\n  );\n\n  useEffect(() => {\n    // Set input title value to query parameter title\n    if (paramTitle !== undefined && paramTitle !== null) {\n      setTitle(paramTitle);\n    }\n    // Focus input if title is not set\n    else {\n      inputRef?.current?.focus();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Use debounce to update title dependencies\n  useEffect(() => {\n    debouncedChange(title);\n    return debouncedChange.cancel;\n  }, [title, debouncedChange]);\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  return (\n    <>\n      <StyledLabel htmlFor=\"text\">CHANGE TEXT</StyledLabel>\n      <StyledInput\n        id=\"text\"\n        ref={inputRef}\n        type=\"text\"\n        value={title}\n        onChange={onChange}\n      />\n    </>\n  );\n};\n\nexport default Input;\n","import { meterColors } from \"./constants\";\nimport { MeterColorPercent } from \"./types\";\n\nexport const getMeterColor = (percentage: number): string => {\n  const index = Math.floor(meterColors.length * (percentage / 100));\n  return meterColors[Math.min(index, meterColors.length - 1)];\n};\n\nexport const getMeterColorPercents = (): MeterColorPercent[] => {\n  return meterColors.map((color, index) => ({\n    strokeStyle: color,\n    min: Math.floor(index * (100 / meterColors.length)),\n    max: Math.ceil((index + 1) * (100 / meterColors.length)),\n  }));\n};\n\nexport const capValue = (value: number): number => {\n  return Math.min(100, Math.max(0, value));\n};\n","import { Gauge } from \"gaugeJS\";\nimport React, { MouseEvent, useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { NumberParam, useQueryParam } from \"use-query-params\";\nimport analytics, { LogEvent } from \"../util/analytics\";\nimport { capValue, getMeterColorPercents } from \"../util/helpers\";\nimport { Colors } from \"../util/theme\";\nimport { QueryParameter } from \"../util/types\";\n\nconst Container = styled.div`\n  display: flex;\n\n  canvas {\n    flex: 1;\n    max-height: calc(100vh - 260px);\n    width: 100%;\n  }\n`;\n\nconst Meter = () => {\n  const [gaugeValue, setGaugeValue] = useState(0);\n  const [paramValue, setParamValue] = useQueryParam(\n    QueryParameter.value,\n    NumberParam\n  );\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const gaugeRef = useRef<any>(null);\n\n  // Set gauge value to query parameter after render\n  useEffect(() => {\n    if (paramValue !== undefined && paramValue !== null) {\n      setGaugeValue(capValue(paramValue));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Update query parameter and gauge when value changes\n  useEffect(() => {\n    setParamValue(gaugeValue || undefined);\n    gaugeRef?.current?.set(gaugeValue);\n  }, [gaugeValue, setParamValue]);\n\n  const updateGauge = (value: number) => {\n    const percent = Math.round(capValue(value * 100));\n    setGaugeValue(percent);\n    analytics.logEvent(LogEvent.ValueChange, { value: percent });\n  };\n\n  const onContentClick = (event: MouseEvent) => {\n    updateGauge(event.clientX / window.innerWidth);\n  };\n\n  useEffect(() => {\n    const options = {\n      angle: 0,\n      lineWidth: 0.4,\n      radiusScale: 1,\n      pointer: {\n        length: 0.55,\n        strokeWidth: 0.1,\n        color: Colors.Header,\n      },\n      limitMax: false,\n      limitMin: true,\n      highDpiSupport: true,\n      staticZones: getMeterColorPercents(),\n    };\n\n    gaugeRef.current = new Gauge(canvasRef.current).setOptions(options);\n    gaugeRef.current.maxValue = 100;\n    gaugeRef.current.setMinValue(0);\n    gaugeRef.current.set(0);\n  }, []);\n\n  return (\n    <Container onClick={onContentClick}>\n      <canvas ref={canvasRef}></canvas>\n    </Container>\n  );\n};\n\nexport default Meter;\n","import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport analytics, { LogEvent } from \"../util/analytics\";\nimport { title } from \"../util/constants\";\nimport { Colors } from \"../util/theme\";\nimport { ShareData } from \"../util/types\";\n\nconst StyledLink = styled.a`\n  position: absolute;\n  top: 6px;\n  left: 12px;\n\n  color: ${Colors.Header};\n  cursor: pointer;\n\n  &:hover svg {\n    fill: ${Colors.Success};\n  }\n`;\n\nconst CopiedLabel = styled.p`\n  margin: 0;\n  font-size: 15px;\n`;\n\nconst ShareButton = () => {\n  const [copied, setCopied] = useState(false);\n\n  // Show temporary copied text when flag is toggled\n  useEffect(() => {\n    if (copied) {\n      setTimeout(() => setCopied(false), 3000);\n    }\n  }, [copied, setCopied]);\n\n  // Copy to clipboard\n  const addToClipboard = (shareData: ShareData): boolean => {\n    if (window.navigator?.clipboard?.writeText) {\n      window.navigator.clipboard.writeText(shareData.url);\n      return true;\n    }\n    return false;\n  };\n\n  // Share using Web Share API\n  const webShare = (shareData: ShareData): boolean => {\n    const navigator = window.navigator as any;\n    if (navigator?.share) {\n      try {\n        navigator.share(shareData);\n        return true;\n      } catch {}\n    }\n    return false;\n  };\n\n  const exportButtonClick = () => {\n    analytics.logEvent(LogEvent.ShareClick);\n\n    const shareData = {\n      title,\n      url: window.location.href,\n    };\n\n    if (webShare(shareData) || addToClipboard(shareData)) {\n      setCopied(true);\n    }\n  };\n\n  return (\n    <StyledLink onClick={exportButtonClick} aria-label=\"Share\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"56\"\n        height=\"56\"\n        viewBox=\"0 0 576 512\"\n        fill=\"currentColor\"\n      >\n        <path d=\"M568.482 177.448L424.479 313.433C409.3 327.768 384 317.14 384 295.985v-71.963c-144.575.97-205.566 35.113-164.775 171.353 4.483 14.973-12.846 26.567-25.006 17.33C155.252 383.105 120 326.488 120 269.339c0-143.937 117.599-172.5 264-173.312V24.012c0-21.174 25.317-31.768 40.479-17.448l144.003 135.988c10.02 9.463 10.028 25.425 0 34.896zM384 379.128V448H64V128h50.916a11.99 11.99 0 0 0 8.648-3.693c14.953-15.568 32.237-27.89 51.014-37.676C185.708 80.83 181.584 64 169.033 64H48C21.49 64 0 85.49 0 112v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48v-88.806c0-8.288-8.197-14.066-16.011-11.302a71.83 71.83 0 0 1-34.189 3.377c-7.27-1.046-13.8 4.514-13.8 11.859z\"></path>\n      </svg>\n      {copied && <CopiedLabel>copied</CopiedLabel>}\n    </StyledLink>\n  );\n};\n\nexport default ShareButton;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { title } from \"../util/constants\";\nimport { Colors } from \"../util/theme\";\n\nconst Header = styled.h1`\n  font-size: 80px;\n  color: ${Colors.Header};\n  text-align: center;\n  margin-bottom: 10px;\n`;\n\nconst Title = () => {\n  return (\n    <header>\n      <Header>{title}</Header>\n    </header>\n  );\n};\n\nexport default Title;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { QueryParamProvider } from \"use-query-params\";\nimport CornerBanner from \"./CornerBanner\";\nimport Input from \"./Input\";\nimport Meter from \"./Meter\";\nimport ShareButton from \"./ShareButton\";\nimport Title from \"./Title\";\n\nconst App = () => {\n  return (\n    <Router>\n      <QueryParamProvider ReactRouterRoute={Route}>\n        <ShareButton />\n        <CornerBanner />\n        <Title />\n        <Input />\n        <Meter />\n      </QueryParamProvider>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}