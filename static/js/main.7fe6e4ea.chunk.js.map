{"version":3,"sources":["util/theme.ts","util/constants.ts","util/helpers.ts","components/Meter.tsx","components/Title.tsx","components/CornerBanner.tsx","components/Input.tsx","components/ShareButton.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Colors","meterColors","Success","Warning","Error","getMeterColor","percentage","index","Math","floor","length","min","capValue","value","max","Meter","useState","gaugeValue","setGaugeValue","useQueryParam","NumberParam","paramValue","setParamValue","useEffect","undefined","onClick","event","xPosition","screenX","width","window","screen","round","id","nrOfLevels","textColor","colors","percent","Header","styled","h1","Title","StyledLink","a","CornerBanner","href","xmlns","height","viewBox","fill","Background","d","StyledInput","input","Input","title","setTitle","StringParam","paramTitle","setParamTitle","type","onChange","e","target","CopiedLabel","p","ShareButton","copied","setCopied","setTimeout","shareData","url","location","navigator","share","webShare","clipboard","writeText","addToClipboard","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7fe6e4ea.chunk.js","sourcesContent":["export enum Colors {\n  Background = \"#ecf0f1\",\n  Header = \"#464a4e\",\n\n  Success = \"#00b894\",\n  Warning = \"#fdcb6e\",\n  Error = \"#d63031\"\n}\n","import { Colors } from \"./theme\";\n\nexport const title = \"BARE-LIGE-O'METER\";\n\nexport const meterColors = [Colors.Success, Colors.Warning, Colors.Error];\n\nexport const githubLink = \"https://github.com/mrodalgaard/bare-lige-ometer.git\";\n","import { meterColors } from \"./constants\";\n\nexport const getMeterColor = (percentage: number) => {\n  const index = Math.floor(meterColors.length * (percentage / 100));\n  return meterColors[Math.min(index, meterColors.length - 1)];\n};\n\nexport const capValue = (value: number) => {\n  return Math.min(100, Math.max(0, value));\n};\n","import React, { useState, useEffect } from \"react\";\nimport GaugeChart from \"react-gauge-chart\";\nimport { useQueryParam, NumberParam } from \"use-query-params\";\n\nimport { meterColors } from \"../util/constants\";\nimport { capValue, getMeterColor } from \"../util/helpers\";\n\nconst Meter = () => {\n  const [gaugeValue, setGaugeValue] = useState(0);\n  const [paramValue, setParamValue] = useQueryParam(\"value\", NumberParam);\n\n  useEffect(() => {\n    if (paramValue !== undefined) {\n      setGaugeValue(capValue(paramValue));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setGaugeValue]);\n\n  useEffect(() => {\n    setParamValue(gaugeValue);\n  }, [gaugeValue, setParamValue]);\n\n  const updateGauge = (value: number) => {\n    setGaugeValue(Math.round(capValue(value * 100)));\n  };\n\n  const onContentClick = (event: any) => {\n    const xPosition = event.screenX;\n    const width = (window as any).screen.width;\n    updateGauge(xPosition / width);\n  };\n\n  return (\n    <div onClick={onContentClick}>\n      <GaugeChart\n        id=\"gauge-chart\"\n        nrOfLevels={3}\n        textColor={getMeterColor(gaugeValue)}\n        colors={meterColors}\n        percent={gaugeValue / 100}\n      />\n    </div>\n  );\n};\n\nexport default Meter;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Colors } from \"../util/theme\";\nimport { title } from \"../util/constants\";\n\nconst Header = styled.h1`\n  font-size: 80px;\n  color: ${Colors.Header};\n  text-align: center;\n`;\n\nconst Title = () => {\n  return <Header>{title}</Header>;\n};\n\nexport default Title;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Colors } from \"../util/theme\";\nimport { githubLink } from \"../util/constants\";\n\nconst StyledLink = styled.a`\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  &:hover svg {\n    fill: ${Colors.Success};\n  }\n`;\n\nconst CornerBanner = () => {\n  return (\n    <StyledLink href={githubLink}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"80\"\n        height=\"80\"\n        viewBox=\"0 0 250 250\"\n        fill={Colors.Background}\n      >\n        <path d=\"M0 0l115 115h15l12 27 108 108V0z\" fill={Colors.Header} />\n        <path d=\"M128 109c-15-9-9-19-9-19 3-7 2-11 2-11-1-7 3-2 3-2 4 5 2 11 2 11-3 10 5 15 9 16\" />\n        <path d=\"M115 115s4 2 5 0l14-14c3-2 6-3 8-3-8-11-15-24 2-41 5-5 10-7 16-7 1-2 3-7 12-11 0 0 5 3 7 16 4 2 8 5 12 9s7 8 9 12c14 3 17 7 17 7-4 8-9 11-11 11 0 6-2 11-7 16-16 16-30 10-41 2 0 3-1 7-5 11l-12 11c-1 1 1 5 1 5z\" />\n      </svg>\n    </StyledLink>\n  );\n};\n\nexport default CornerBanner;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Colors } from \"../util/theme\";\nimport { useQueryParam, StringParam } from \"use-query-params\";\n\nconst StyledInput = styled.input`\n  display: block;\n  margin: 0 auto;\n\n  background: transparent;\n  border: 0;\n  outline: 0;\n  font-size: 40px;\n  color: ${Colors.Header};\n  text-align: center;\n`;\n\nconst Input = () => {\n  const [title, setTitle] = useState(\"\");\n  const [paramTitle, setParamTitle] = useQueryParam(\"title\", StringParam);\n\n  useEffect(() => {\n    if (paramTitle !== undefined) {\n      setTitle(paramTitle);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setTitle]);\n\n  useEffect(() => {\n    setParamTitle(title);\n  }, [title, setParamTitle]);\n\n  return (\n    <StyledInput\n      type=\"text\"\n      value={title}\n      onChange={e => setTitle(e.target.value)}\n    />\n  );\n};\n\nexport default Input;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Colors } from \"../util/theme\";\nimport { title } from \"../util/constants\";\nimport { ShareData } from \"../util/types\";\nimport { useState, useEffect } from \"react\";\n\nconst StyledLink = styled.a`\n  position: absolute;\n  top: 6px;\n  left: 12px;\n\n  color: ${Colors.Header};\n  cursor: pointer;\n\n  &:hover svg {\n    fill: ${Colors.Error};\n  }\n`;\n\nconst CopiedLabel = styled.p`\n  margin: 0;\n  font-size: 15px;\n`;\n\nconst ShareButton = () => {\n  const [copied, setCopied] = useState(false);\n\n  useEffect(() => {\n    if (copied) {\n      setTimeout(() => setCopied(false), 3000);\n    }\n  }, [copied, setCopied]);\n\n  const addToClipboard = (shareData: ShareData): boolean => {\n    if (\n      window.navigator &&\n      window.navigator.clipboard &&\n      window.navigator.clipboard.writeText\n    ) {\n      window.navigator.clipboard.writeText(shareData.url);\n      return true;\n    }\n    return false;\n  };\n\n  const webShare = (shareData: ShareData): boolean => {\n    const navigator = window.navigator as any;\n    if (navigator && navigator.share) {\n      try {\n        navigator.share(shareData);\n        return true;\n      } catch {}\n    }\n    return false;\n  };\n\n  const exportButtonClick = () => {\n    const shareData = {\n      title,\n      url: window.location.href\n    };\n\n    if (webShare(shareData) || addToClipboard(shareData)) {\n      setCopied(true);\n    }\n  };\n\n  return (\n    <StyledLink onClick={exportButtonClick}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"56\"\n        height=\"56\"\n        viewBox=\"0 0 576 512\"\n        fill=\"currentColor\"\n      >\n        <path d=\"M568.482 177.448L424.479 313.433C409.3 327.768 384 317.14 384 295.985v-71.963c-144.575.97-205.566 35.113-164.775 171.353 4.483 14.973-12.846 26.567-25.006 17.33C155.252 383.105 120 326.488 120 269.339c0-143.937 117.599-172.5 264-173.312V24.012c0-21.174 25.317-31.768 40.479-17.448l144.003 135.988c10.02 9.463 10.028 25.425 0 34.896zM384 379.128V448H64V128h50.916a11.99 11.99 0 0 0 8.648-3.693c14.953-15.568 32.237-27.89 51.014-37.676C185.708 80.83 181.584 64 169.033 64H48C21.49 64 0 85.49 0 112v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48v-88.806c0-8.288-8.197-14.066-16.011-11.302a71.83 71.83 0 0 1-34.189 3.377c-7.27-1.046-13.8 4.514-13.8 11.859z\"></path>\n      </svg>\n      {copied && <CopiedLabel>copied</CopiedLabel>}\n    </StyledLink>\n  );\n};\n\nexport default ShareButton;\n","import React from \"react\";\n\nimport Meter from \"./Meter\";\nimport Title from \"./Title\";\nimport CornerBanner from \"./CornerBanner\";\nimport Input from \"./Input\";\nimport ShareButton from \"./ShareButton\";\n\nconst App = () => {\n  return (\n    <div>\n      <ShareButton />\n      <CornerBanner />\n      <Title />\n      <Input />\n      <Meter />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}