{"version":3,"sources":["util/theme.ts","util/constants.ts","components/Meter.tsx","components/Title.tsx","components/CornerBanner.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Colors","meterColors","Success","Warning","Error","getMeterColor","percentage","index","Math","floor","length","Meter","useState","gaugeValue","setGaugeValue","onClick","event","value","capValue","min","max","round","updateGauge","screenX","window","screen","width","id","nrOfLevels","textColor","colors","percent","Header","styled","h1","Title","StyledLink","a","CornerBanner","href","xmlns","height","viewBox","fill","d","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+LAAYA,E,0EAAAA,K,iBAAAA,E,kBAAAA,E,kBAAAA,E,iBAAAA,M,KCEL,IAAMC,EAAc,CAACD,EAAOE,QAASF,EAAOG,QAASH,EAAOI,OAEtDC,EAAgB,SAACC,GAC5B,IAAMC,EAAQC,KAAKC,MAAMR,EAAYS,OAASJ,GAC9C,OAAOL,EAAYM,IC0BNI,EA3BD,WAAO,IAAD,EACkBC,mBAAS,GAD3B,mBACXC,EADW,KACCC,EADD,KAclB,OACE,yBAAKC,QAPgB,SAACC,IALJ,SAACC,GACnB,IAAMC,EAAWV,KAAKW,IAAI,IAAKX,KAAKY,IAAI,EAAW,IAARH,IAC3CH,EAAcN,KAAKa,MAAMH,GAAY,KAMrCI,CAFkBN,EAAMO,QACTC,OAAeC,OAAOC,SAMnC,kBAAC,IAAD,CACEC,GAAG,cACHC,WAAY,EACZC,UAAWxB,EAAcQ,GACzBiB,OAAQ7B,EACR8B,QAASlB,M,+ICrBjB,IAAMmB,EAASC,IAAOC,GAAV,IAEDlC,EAAOgC,QAQHG,EAJD,WACZ,OAAO,kBAACH,EAAD,2B,sHCNT,IAAMI,EAAaH,IAAOI,EAAV,KAwBDC,EAlBM,WACnB,OACE,gBAACF,EAAD,CAAYG,KHLU,uDGMpB,uBACEC,MAAM,6BACNd,MAAM,KACNe,OAAO,KACPC,QAAQ,cACRC,KAAK,WAEL,wBAAMC,EAAE,mCAAmCD,KAAM3C,EAAOE,UACxD,wBAAM0C,EAAE,oFACR,wBAAMA,EAAE,wNCRDC,EAVH,WACV,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCAC,EAAcC,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KCjGjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIqB,IACnBC,oBACDpD,OAAOwB,SAAST,MAEJsC,SAAWrD,OAAOwB,SAAS6B,OAIvC,OAGFrD,OAAOsD,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,UAAMwB,oBAAN,sBAEP9B,IAgEV,SAAiCM,EAAeC,GAE9C0B,MAAM3B,GACHK,KAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,KAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,KAAK,WAC7BjC,OAAOwB,SAASwC,aAKpBrC,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,KAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,MC9C/BE,K","file":"static/js/main.c8862b82.chunk.js","sourcesContent":["export enum Colors {\n  Header = \"#464a4e\",\n\n  Success = \"#00b894\",\n  Warning = \"#fdcb6e\",\n  Error = \"#d63031\"\n}\n","import { Colors } from \"./theme\";\n\nexport const meterColors = [Colors.Success, Colors.Warning, Colors.Error];\n\nexport const getMeterColor = (percentage: number) => {\n  const index = Math.floor(meterColors.length * percentage);\n  return meterColors[index];\n};\n\nexport const githubLink = \"https://github.com/mrodalgaard/bare-lige-ometer.git\";\n","import React, { useState } from \"react\";\nimport GaugeChart from \"react-gauge-chart\";\n\nimport { meterColors, getMeterColor } from \"../util/constants\";\n\nconst Meter = () => {\n  const [gaugeValue, setGaugeValue] = useState(0);\n\n  const updateGauge = (value: number) => {\n    const capValue = Math.min(100, Math.max(0, value * 100));\n    setGaugeValue(Math.round(capValue) / 100);\n  };\n\n  const onContentClick = (event: any) => {\n    const xPosition = event.screenX;\n    const width = (window as any).screen.width;\n    updateGauge(xPosition / width);\n  };\n\n  return (\n    <div onClick={onContentClick}>\n      <GaugeChart\n        id=\"gauge-chart\"\n        nrOfLevels={3}\n        textColor={getMeterColor(gaugeValue)}\n        colors={meterColors}\n        percent={gaugeValue}\n      />\n    </div>\n  );\n};\n\nexport default Meter;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Colors } from \"../util/theme\";\n\nconst Header = styled.h1`\n  font-size: 80px;\n  color: ${Colors.Header};\n  text-align: center;\n`;\n\nconst Title = () => {\n  return <Header>BARE-LIGE-O'METER</Header>;\n};\n\nexport default Title;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Colors } from \"../util/theme\";\nimport { githubLink } from \"../util/constants\";\n\nconst StyledLink = styled.a`\n  position: absolute;\n  top: 0;\n  right: 0;\n`;\n\nconst CornerBanner = () => {\n  return (\n    <StyledLink href={githubLink}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"80\"\n        height=\"80\"\n        viewBox=\"0 0 250 250\"\n        fill=\"#ffffff\"\n      >\n        <path d=\"M0 0l115 115h15l12 27 108 108V0z\" fill={Colors.Success} />\n        <path d=\"M128 109c-15-9-9-19-9-19 3-7 2-11 2-11-1-7 3-2 3-2 4 5 2 11 2 11-3 10 5 15 9 16\" />\n        <path d=\"M115 115s4 2 5 0l14-14c3-2 6-3 8-3-8-11-15-24 2-41 5-5 10-7 16-7 1-2 3-7 12-11 0 0 5 3 7 16 4 2 8 5 12 9s7 8 9 12c14 3 17 7 17 7-4 8-9 11-11 11 0 6-2 11-7 16-16 16-30 10-41 2 0 3-1 7-5 11l-12 11c-1 1 1 5 1 5z\" />\n      </svg>\n    </StyledLink>\n  );\n};\n\nexport default CornerBanner;\n","import React from \"react\";\n\nimport Meter from \"./Meter\";\nimport Title from \"./Title\";\nimport CornerBanner from \"./CornerBanner\";\n\nconst App = () => {\n  return (\n    <div>\n      <CornerBanner />\n      <Title />\n      <Meter />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}